{"version":3,"sources":["Components/Test.js","App.js","serviceWorker.js","index.js"],"names":["Test","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","activePage","preloader","pageNumber","console","log","concat","setState","_this2","setTimeout","fetch","then","response","json","data","arr","users","forEach","i","push","LoaderStyle","styled","div","_templateObject","Paragraf","p","_templateObject2","Card","_templateObject3","react_default","a","createElement","className","react_loader_spinner_default","type","color","height","width","Pagination_default","itemsCountPerPage","totalItemsCount","pageRangeDisplayed","onChange","handlePageChange","bind","map","key","id","name","surname","desc","Component","App","Components_Test","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.148cc63b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { createStore } from 'redux'\nimport Pagination from \"react-js-pagination\";\nimport Loader from 'react-loader-spinner'\nimport styled from 'styled-components';\nimport '././css/style.css';\nclass Test extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.state = { \n            posts : [],\n            activePage: 0,\n            preloader: true\n         };\n \n      }\n      \n      \n      handlePageChange(pageNumber) {\n        console.log(`active page is ${pageNumber}`);\n        this.setState({ activePage: pageNumber }); \n      }\n   \n    componentDidMount() {\n    setTimeout(()=>{\n        fetch('http://dev.frevend.com/json/users.json')\n    .then(function(response){\n       return  response.json();\n    }).then(function(data){\n\n        let arr = [];\n             data.users.forEach(function(i) {\n                 arr.push(i);\n             });\n             return arr;\n         }).then((posts)=> {\n             console.log(posts);\n             this.setState({ posts });\n             this.setState({ preloader : false });\n         })\n    },3000)\n  \n} \n\nrender() {\nconst LoaderStyle = styled.div`\n            text-align: center;\n            padding: 22%;\n    \n`;\nconst Paragraf = styled.p`\n            text-align: center;\n            font-size: 30px;\n            padding-top: 4%;\n    \n`;\nconst Card = styled.div`\ndisplay: flex;\nmargin: auto;\n            padding: 2%;\n            border: 1px solid black;\n            width: 500px;\n            border-radius: 18px;\n            margin-bottom: 100px;\n`;\n\n\n\n    return(\n                <div  className='main'>\n\n                {(this.state.preloader)? <LoaderStyle>\n                                                <Loader type=\"Bars\" color=\"#somecolor\" height={100} width={100} />\n                                        </LoaderStyle>: <div>\n                                        <Paragraf> testing work   front-end developer  Merehead </Paragraf>\n                                       \n                                        <Pagination \n                                        \n                                            activePage={this.state.activePage}\n                                            itemsCountPerPage={5}\n                                            totalItemsCount={20}\n                                            pageRangeDisplayed={5}\n                                            onChange={this.handlePageChange.bind(this)}\n                                        />\n                                       \n                </div> }\n\n                {(this.state.activePage === 1)?<div>\n                    {this.state.posts.map((key)=>{\n                        if(key.id >0 && key.id <=5 ){\n                            return <Card key={key.id}>\n                            <p>{key.id}</p>\n                            <p>{key.name}</p>\n                            <p>{key.surname}</p>\n                            <p>{key.desc}</p>\n                        </Card>\n                        }\n                    \n                  })}\n                </div> : ''}\n                {(this.state.activePage === 2)?<div>\n                    {this.state.posts.map((key)=>{\n                        if(key.id >5 && key.id <=10 ){\n                            return <Card key={key.id}>\n                            <p>{key.id}</p>\n                            <p>{key.name}</p>\n                            <p>{key.surname}</p>\n                            <p>{key.desc}</p>\n                        </Card>\n                        }\n                    \n                  })}\n                </div> : ''}\n                {(this.state.activePage === 3)?<div>\n                    {this.state.posts.map((key)=>{\n                        if(key.id >10 && key.id <=15 ){\n                            return <Card key={key.id}>\n                            <p>{key.id}</p>\n                            <p>{key.name}</p>\n                            <p>{key.surname}</p>\n                            <p>{key.desc}</p>\n                        </Card>\n                        }\n                    \n                  })}\n                </div> : ''}\n                {(this.state.activePage === 4)?<div>\n                    {this.state.posts.map((key)=>{\n                        if(key.id >15 && key.id <=20 ){\n                            return <Card key={key.id}>\n                            <p>{key.id}</p>\n                            <p>{key.name}</p>\n                            <p>{key.surname}</p>\n                            <p>{key.desc}</p>\n                        </Card>\n                        }\n                    \n                  })}\n                </div> : ''}\n               \n </div>\n    );\n}\n}\nexport default Test;","import React, { Component } from 'react';\nimport './App.css';\nimport Test from './Components/Test'\nclass App extends Component {\n  render() {\n    return (\n      <Test/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}